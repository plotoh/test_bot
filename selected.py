from datetime import datetime, date

from aiogram.types import CallbackQuery, Message

from aiogram_dialog import Window, Dialog, DialogManager
from aiogram_dialog.widgets.kbd import Button, Back

from states import MySG


async def back_to_operation_type(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(state=MySG.select_operation_type)


async def select_operation_type(c: CallbackQuery, button: Button, manager: DialogManager):
    finances = {
        'expenses': '–†–∞—Å—Ö–æ–¥—ã',
        'incomes': '–î–æ—Ö–æ–¥—ã',
        'investments': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
    }
    manager.dialog_data['comment'] = '-'

    if c.data == 'expenses':
        manager.dialog_data['operation_type'] = finances[c.data]
        await manager.switch_to(state=MySG.expenses)
    elif c.data == 'incomes':
        manager.dialog_data['operation_type'] = finances[c.data]
        await manager.switch_to(state=MySG.incomes)
    elif c.data == 'investments':
        manager.dialog_data['operation_type'] = finances[c.data]
        await manager.switch_to(state=MySG.investments)

    elif c.data == 'table':
        await manager.switch_to(state=MySG.table)
        # await callback.message.answer(
        #     '–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É\n\n –°–¥–µ–ª–∞—Ç—å –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏, –∞ —Ç–µ–∫—Å—Ç–æ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∞–±–ª–∏—Ü–µ\n\n–¥–æ–ª–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∫ '
        #     '–¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ, –∞ –Ω–µ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    elif c.data == 'settings':
        await manager.switch_to(state=MySG.settings)
        # await callback.message.answer('–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫\n\n –°–¥–µ–ª–∞—Ç—å –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫, –≤–µ—Ä–æ—è—Ç–Ω–æ checkbox\n\n–¥–æ–ª–∂–Ω–æ'
        #                               ' –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ, –∞ –Ω–µ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')


async def select_category(c: CallbackQuery, button: Button, manager: DialogManager):
    all_categories = {'products': 'üõí –ü—Ä–æ–¥—É–∫—Ç—ã –∏ —Ö–æ–∑—Ç–æ–≤–∞—Ä—ã', 'snacks': 'üçï –í–∫—É—Å–Ω—è—à–∫–∏', 'bus': 'üöá–ê–≤—Ç–æ–±—É—Å—ã',
                      'taxi': 'üöï –¢–∞–∫—Å–∏ ', 'clothes': 'üëï–û–¥–µ–∂–¥–∞', 'gifts': 'üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'leisure': 'üé≥ –î–æ—Å—É–≥',
                      'emergency': 'üöß –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ',
                      'care': 'ü¶∑ –£—Ö–æ–¥ –∑–∞ —Å–æ–±–æ–π', 'fast_food': 'üçî –ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞', 'partner': '‚ù§Ô∏è –ü–∞—Ä—Ç–Ω–µ—Ä',
                      'education': 'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'communication': 'üö∞ –ö \\ –£, —Å–≤—è–∑—å', 'parents': '–ü–æ–º–æ—â—å —Ä–æ–¥–∏—Ç–µ–ª—è–º',
                      'housee': 'üè° –î–æ–º, —Ä–µ–º–æ–Ω—Ç', 'other': 'üåé –ü—Ä–æ—á–∏–µ', 'salary': 'üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞',
                      'underworking': 'üõ†Ô∏è –ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', 'selling': 'üí≤ –ü—Ä–æ–¥–∞–∂–∞ –≤–µ—â–µ–π',
                      'cashback': 'ü™ô–ö—ç—à–±–µ–∫', 'freelance': 'üíª –§—Ä–∏–ª–∞–Ω—Å', 'deal': 'ü§ù –£—Å–ª—É–≥–∏', 'deposits': 'üè¶ –í–∫–ª–∞–¥—ã',
                      'stock': 'üìà –ê–∫—Ü–∏–∏', 'dividends': 'üí∞ –î–∏–≤–∏–¥–µ–Ω–¥—ã', 'crypto': 'üé∞ –ö—Ä–∏–ø—Ç–∞', }
    manager.dialog_data['category'] = all_categories[c.data]
    await manager.switch_to(state=MySG.enter_amount)


async def on_entered_amount(m: Message, button: Button, manager: DialogManager, kwargs):
    print(kwargs)
    manager.dialog_data['amount'] = int(m.text)
    manager.dialog_data['date'] = datetime.now().strftime("%d-%m-%Y")
    await manager.switch_to(state=MySG.set_operation)


async def select_edit_option(c: CallbackQuery, button: Button, manager: DialogManager):
    if c.data == 'edit_category':
        pass
    elif c.data == 'edit_date':
        pass
    elif c.data == 'edit_amount':
        pass
    elif c.data == 'enter_comment':
        pass
    elif c.data == 'cancel_op':
        pass
    elif c.data == 'regular_op':
        pass


async def on_entered_comment(m: Message, button: Button, manager: DialogManager, kwargs):
    print(kwargs)
    manager.dialog_data['comment'] = m.text
    await manager.switch_to(state=MySG.set_operation)


async def on_date_selected(callback: CallbackQuery, widget, manager: DialogManager, selected_date: date):
    await callback.answer(str(datetime.now().strftime("%d-%m-%Y")))
    await manager.switch_to(state=MySG.edit_date)
